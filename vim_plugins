"プラグインに関する設定
"管理にはNeoBundle
"rtpに追加は~/.vimrcでやること

"プロトコル
let g:neobundle#types#git#default_protocol="https"

" neobundleインストール先
let s:neobundle_dir=expand('~/.vim/bundle')

"Load neobundle
" Shougo/shougo-s-github/vim/.vimrc

if !isdirectory(s:neobundle_dir)
 if !exists("*mkdir")
  echohl WarningMsg
  echomsg 'mkdirできません'
  echomsg '作成して:'.s:neobundle_dir
  echohl None
  finish
 endif
 mkdir(s:neobundle_dir,"p")
endif

if !isdirectory(s:neobundle_dir.'/neobundle.vim')
 execute '!git clone https://github.com/Shougo/neobundle.vim.git' s:neobundle_dir.'/neobundle.vim'
endif
execute 'set runtimepath^=' . s:neobundle_dir.'/neobundle.vim'


call neobundle#rc(s:neobundle_dir)
"プラグイン管理
NeoBundleFetch 'Shougo/neobundle.vim', '', 'default'

"Unite
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/unite-build'
NeoBundle 'osyo-manga/unite-quickfix'
NeoBundle 'h1mesuke/unite-outline'

"補完
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'honza/vim-snippets'

"編集系
NeoBundle 'matchit.zip'
NeoBundle 'tpope/vim-surround'

NeoBundle 'Shougo/vimshell'
NeoBundleLazy 'Shougo/vinarise',{
   \ 'autoload' : {
   \  'commands' : 'Vinarise',
   \ }
   \}
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'sudo.vim'
NeoBundle 'vimpager'
NeoBundle 'Shougo/vimproc',{
   \'build':{
   \ 'windows' : 'make -f make_mingw32.mak',
   \ 'cygwin' : 'make -f make_cygwin.mak',
   \ 'mac' : 'make -f make_mac.mak',
   \ 'unix' : 'make -f make_unix.mak'
   \}
   \}

NeoBundle 'mattn/calendar-vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'project.tar.gz'
"要python
if ( has('python') )
 NeoBundleLazy 'sjl/gundo.vim'
 call neobundle#config('gundo.vim',{
    \ 'autoload' : {
    \  'commands' : 'GundoToggle'
    \ }
    \})
endif


"vim-ref
NeoBundle 'thinca/vim-ref'

"タグ管理
NeoBundleLazy 'int3/vim-taglist-plus'
NeoBundle 'majutsushi/tagbar'

"Git系
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mattn/gist-vim'

"ヘルプ
NeoBundle 'vim-jp/vimdoc-ja'

"変換
"使いこなせる気がしない
NeoBundleLazy 'tyru/eskk.vim'

NeoBundle 'suan/vim-instant-markdown'
" 更新する時間を減らす
let g:instant_markdown_slow=1


NeoBundle 'terryma/vim-multiple-cursors'

NeoBundle 'matrix.vim'
NeoBundle 'HJKL'
NeoBundle 'deris/vim-duzzle'
"要python
NeoBundle 'sudoku_game'

NeoBundleLazy 'h1mesuke/vim-alignta',{
   \ 'autoload' : {
   \  'commands' : ['Alignta','Align']
   \ }
   \}

" Tags
NeoBundleLazy 'tsukkee/unite-tag',{
   \ 'autoload' : {
   \  'unite_sources' : 'tag'
   \ }
   \}


NeoBundle 'kana/vim-textobj-user'
NeoBundle 'h1mesuke/textobj-wiw',{
   \ 'depends' : 'kana/vim-textobj-user' ,
   \ }

"HTML
NeoBundleLazy 'othree/html5.vim',{
   \  'autoload' : {
   \   'filetypes' : ['html', 'php'] ,
   \  } ,
   \ }

NeoBundleLazy 'mattn/emmet-vim',{
   \  'autoload' : {
   \   'filetypes' : ['html', 'xml' , 'svg' , 'css', 'php'],
   \   'mappings' : ['<C-y>'],
   \  },
   \ }
let g:user_emmet_settings={
   \ 'lang' : 'ja',
   \ 'indentation' : ' ',
   \ 'php' : {
   \  'extends' : 'html',
   \  'filters' : 'html,c',
   \ },
   \ 'xml' : {
   \  'extends' : 'html',
   \ },
   \}

"Javascript
NeoBundleLazy 'teramako/jscomplete-vim',{
   \ 'autoload' : {
   \   'filetypes' : 'javascript' ,
   \  }
   \ }

"NeoBundleLazy 'pangloss/vim-javascript',{
"   \ 'autoload' : {
"   \  'filetypes' : 'javascript' ,
"   \ }
"   \}
""Javascript indent
NeoBundleLazy 'jiangmiao/simple-javascript-indenter',{
   \ 'autoload' : {
   \  'filetypes' : 'javascript' ,
   \ }
   \}

"CSS 
NeoBundleLazy 'hail2u/vim-css3-syntax',{
   \ 'autoload' : {
   \  'filetypes' : 'css' ,
   \ }
   \}

"svg
NeoBundleLazy 'svg.vim',{
   \ 'autoload' : {
   \  'filetypes' : 'svg' ,
   \ }
   \}
filetype plugin indent on

"NeoComplCache
let g:neocomplcache_enable_at_startup=1
let g:neocomplcache_force_overwrite_completefunc=1

"スニペット
let g:neosnippet#enable_snipmate_compatibility=1
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

imap <expr><TAB> neosnippet#expandable_or_jumpable() ? 
   \ "\<Plug>(neosnippet_expand_or_jump)"
   \: pumvisible() ? "\<C-n>" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
   \ "\<Plug>(neosnippet_expand_or_jump)"
   \: "\<TAB>"

"tagbar
let g:tagbar_iconchars=['>','v']
nmap <F2> :TagbarToggle<CR>

"VimFiler
nmap <F3> :VimFiler -toggle -buffer-name=virusVimFiler -split<CR>

"vim-ref


" vim: set filetype=vim :
